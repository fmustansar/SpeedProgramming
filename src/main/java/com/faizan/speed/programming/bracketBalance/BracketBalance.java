package com.faizan.speed.programming.bracketBalance;

import java.util.*;

public class BracketBalance {

    public static void main(String[] args) {
        String[] inputs = {
                /*"[()][{}()][](){}([{}(())([[{}]])][])[]([][])(){}{{}{[](){}}}()[]({})[{}{{}([{}][])}]"
                ,"[()][{}[{}[{}]]][]{}[]{}[]{{}({}(){({{}{}[([[]][[]])()]})({}{{}})})}"
                ,"(])[{{{][)[)])(]){(}))[{(})][[{)(}){[(]})[[{}(])}({)(}[[()}{}}]{}{}}()}{({}](]{{[}}(([{]"
                ,"){[]()})}}]{}[}}})}{]{](]](()][{))])(}]}))(}[}{{)}{[[}[]"
                ,"}(]}){"
                ,"((]()(]([({]}({[)){}}[}({[{])(]{()[]}}{)}}]]{({)[}{("
                ,"{}{({{}})}[][{{}}]{}{}(){{}[]}{}([[][{}]]())"
                ,"(){}[()[][]]{}(())()[[([])][()]{}{}(({}[]()))()[()[{()}]][]]"
                ,"()([]({}[]){}){}{()}[]{}[]()(()([[]]()))()()()[]()(){{}}()({[{}][]}[[{{}({({({})})})}]])"
                ,"[]([{][][)(])}()([}[}(})}])}))]](}{}})[]({{}}))[])(}}[[{]{}]()[(][])}({]{}[[))[[}[}{(]})()){{(]]){]["
                ,"{()({}[[{}]]()(){[{{}{[[{}]{}((({[]}{}()[])))]((()()))}(()[[[]]])((()[[](({([])()}))[]]))}]})}"
                ,"()(){{}}[()()]{}{}"
                ,"{}()([[]])({}){({[][[][[()]]{{}[[]()]}]})}[](())((())[{{}}])"
                ,"{}(((){}){[]{{()()}}()})[]{{()}{(){()(){}}}}{()}({()(()({}{}()((()((([])){[][{()}{}]})))))})"
                ,"][[{)())))}[)}}}}[{){}()]([][]){{{{{[)}]]{([{)()][({}[){]({{"
                ,"{{}("*/
                "{[{((({}{({({()})()})[]({()[[][][]]}){}}))){}}]}{}{({((){{}[][]{}[][]{}}[{}])(())}[][])}"
                /*,"()[[][()[]][]()](([[[(){()[[]](([]))}]]]))"
                ,"()[]({}{})(()){{{}}()()}({[]()}())[](){}(({()}[{}[{({{}}){({}){({})((({()})))}}}]]))"
                ,"}[{){({}({)})]([}{[}}{[(([])[(}){[]])([]]}(]]]]{]["
                ,"[{]{[{(){[}{}(([(]}])(){[[}(]){(})))}}{{)}}{}][({(}))]}({)"
                ,")})[(]{][[())]{[]{{}}[)[)}[]){}](}({](}}}[}{({()]]"
                ,"[[[({[]}({[][[[[][[{(()[][])}()[][]][]{}]]]]}))][(()){}]]]()[{}([]{}){}{{}}]"
                ,"({[]({[]})}())[][{}[{{(({{{([{}])}}}))}}]]"
                ,"([((()))()])[][][]{}()(([]))[]()[]((){}[]){}(){{}[]}[[{[]}]]"
                ,"[[(((({}{[]{}()}){}{{}}){({[]{[{}]{(){}(((){()}))}()}}[[]]()()[()])[[{}{}]()]}))]]{}[]{}({({{}})})"
                ,"(]{()}(("
                ,"[][(())[({{{()[]}}{[[][[][[[]{{{[()]{{{{}{[]}[][]}}}}}}]]]]}})]]"
                ,"}[})})}[)]{}{)"
                ,"({(}{})))}(}[)[}{)}}[)[{][{(}{{}]({}{[(})[{[({{[}{(]]})}"
                ,"]}})[]))]{][])[}(])]({[]}[]([)"
                ,"[{{}{[{{[}[[}([]"
                ,"[([]){}][({})({[(([])[][])][[{}{([{{}{(()){{{({}{{}}())}}[]}}()[()[{{{([](()){[[[]]]})}}}]]}])}]]})]"
                ,"]{}{(}))}](})[{]]()(]([}]([}][}{]{[])}{{{]([][()){{})[{({{{[}{}](]}}"
                ,"{[{}}){(}[][)(}[}][)({[[{]}[(()[}}){}{)([)]}(()))]{)(}}}]["
                ,"(]{}{(}}}[)["
                ,"[]{}{[[]]}([{}]{}[]){{(())}}"
                ,"[)([{(][(){)[)}{)]]}}([((][[}}(]{}]]}]][(({{{))[[){}{]][))[]{]][)[{{}{()]){)])))){{{[(]}[}}{}]"
                ,"{({(){[[[][]{}[[([]{})]{}]][[]()()]]}})}[{}{{}}]"
                ,")}][(})){))[{}[}"
                ,"{[]{({]}[}}[{([([)([){{}{(}}[]}}[[{[}[[()(])[}[]"
                ,"()()()[]"
                ,"((){}])][]][}{]{)]]}][{]}[)(])[}[({("
                ,")[((])(]]]]((]){{{{())]}]}(}{([}(({}]])[[{){[}]{{}})[){("
                ,"}][[{[((}{[]){}}[[[)({[)}]]}(]]{[)[]}{}(){}}][{()]))})]][(((}}"
                ,"([]){}{{}{}}()([([{}{[[]()([(([]()))()[[]]])]}])])"
                ,"[()[[]{{[]}()([])}[]][][]][]()[]{}{}[][]{}{}[()(){}]"
                ,"{[{){]({(((({](]{([])([{{([])[}(){(]](]{[{[]}}())[){})}))[{})))["
                ,"{}[()[]][]{}{}[[{{[[({})]()[[()]]]}}]]"
                ,"{[{}[][]]}[((()))][]({})[]{}{()}"
                ,"(){[{({})}]}"
                ,"([]])][{)]({)[]))}]())[}]))][}{(}}})){]}]{[)}(][})[["
                ,"((({{}(([{}(())]))[()]{[[[]()]]}})))"
                ,"}()))}(}]]{{})}][{](]][{]{[[]]]}]]}([)({([))[[(]}])}[}(([{)[)]]([[](]}]}{]{{})[]){]}{])("
                ,"{}{}{}{[[()]][]}"
                ,")]}]({{})[[[{]{{{}}][))]{{"
                ,"))){({}])}])}}]{)()(}(]}(["
                ,"([[]][])[[]()][]()(([[]]{[()[]{[][{}]}[()]]{}{[]}}{{}()}(()[([][]{})[[{}][]]{}[]])))"
                ,"(]{[({}[){)))}]{[{}][({[({[]))}[}]}{()(([]{]()}})}[]{[)](((]]])([]}}]){)(([]]}[[}["
                ,"([[]])({}(([(){{}[{}]}]){[{}]}))[][{}{}](){}"
                ,"[][][][][][([])][]{({()}[[()()]{([(){[]{}}{(())}{[](){}()({}())}[({}[[]()])][]])}])}"
                ,"}[{{(}})}}(((())()({]{([]((][(({)[({[]]}[])}]{][{{}]{)][}(])}}}))}}}"
                ,"[]({})()[]{}{}[]({}{})[]{([])()[()][{()({})[{}{[[()]{}[]][]}(({{[]{()()()}{}[]()}[]}){{}{}})]}]}"
                ,"{{(([{)]{}({][{](){({([[[][)}[)})("
                ,"[{}]{[()({[{}]})]}"
                ,"[[{}]]"
                ,"]{{({[{]}[[)]]}{}))}{){({]]}{]([)({{[]){)]{}){){}()})(]]{{])(])[]}][[()()}"
                ,"{[([}[[{{(]]][}()())]{){(){)]]){})}]{][][(}[]())[}[)})})[][{[)[})()][]))}[[}"
                ,"]()])}[}}}{]]{)[}(}]]])])}{(}{([{]({)]}])(})[{}[)]])]}[]{{)){}{()}]}((}}{({])[}])[]}"
                ,"(]}[{}{{][}))){{{([)([[])([]{["
                ,"{(()[]){}}(){[]}({{}(()())})([]){}{}(())()[()]{}()"
                ,"{{}[{}[{}[]]]}{}({{[]}})[[(){}][]]{}(([]{[][]()()}{{{()()}{[]}({}[]{()})}{()}[[]][()]}))"
                ,"{[][]}[{}[](){}]{{}{[][{}]}}"
                ,"()(){}(){((){}[])([[]]())}"
                ,"{}[[{[((}[(}[[]{{]([(}]][["
                ,"{}[([{[{{}()}]{}}([[{}[]]({}{{()}[][][]})])])]"
                ,"{[](}([)(])[]]})()]){[({]}{{{)({}(][{{[}}(]{"
                ,"[][]{{}[](())}{}({[()]}())[][[][({}([{}]))]]"
                ,"((()))[]{[(()({[()({[]}{})]}))]}{[]}{{({}{})[{}{}]{()([()])[{()}()[[]{}()]{}{}[]()]}[[]{[]}([])]}}"*/};

        for(int i=0; i< inputs.length; i++) {
            System.out.println(BracketBalance.isBalanced(inputs[i]));
        }

    }
    public static String isBalanced(String sampleString) {
        String opening = "[{(";
        String closing = "]})";
        Stack<String> stack = new Stack<>();

        for(int i=0; i<sampleString.length(); i++) {
            char targettedCharacter = sampleString.charAt(i);
            int openingIndex = opening.indexOf(targettedCharacter);
            int closingIndex = closing.indexOf(targettedCharacter);
            ;
            if (i == 0) {
                if (closingIndex != -1) {
                    return "NO";
                }
            }
            //Rest of the array
            if (openingIndex != -1) {
                stack.push(String.valueOf(targettedCharacter));
            } else if(!stack.isEmpty()) {

                String lastBracket = stack.pop();
                int peekedIndexFromOpening = opening.indexOf(lastBracket);
                int currentIndexFromClosing = closing.indexOf(targettedCharacter);
                if (peekedIndexFromOpening != currentIndexFromClosing) {
                    return "NO";
                }
            } else {
                return "NO";
            }
        }
        return "YES";
    }
}
